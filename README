1. Общее описание проекта

Цель:
Создать внутреннюю CRM-систему для учёта звонков с интеграцией в локальный Asterisk.
Система должна обеспечивать:

учёт всех звонков (входящих, исходящих, пропущенных, брошенных);

автоматическое создание карточек звонков;

заполнение обязательных полей (цель, категория, резюме);

хранение записей и привязку их к карточкам;

аналитику по эффективности операторов, очередям, категориям звонков;

доступ к записям по ролям (прослушивание всем, скачивание только руководителям).

2. Архитектура
Телефония

Asterisk: версия 18.16.0 (chan_pjsip), поддержка будущих LTS (20+).

CDR и CEL: включены. CEL используется для детализации сценариев звонка.

Очереди: поддержка нескольких IVR и очередей операторов.

Кодеки: приоритеты провайдера — G711A, G729A; для внутренних WebRTC-операторов можно использовать Opus/PCMU.

Запись: обязательна для всех вызовов, включена на стороне Asterisk (MixMonitor/ChanMix).

Веб-клиент

Технологии: React + TypeScript + SIP.js.

Функции: звонки, удержание, перевод, screen-pop карточки.

Количество операторов: 5–10 одновременно (с запасом).

Backend

Call Control сервис: Go или Node (NestJS).

Управление вызовами через Asterisk ARI.

Получение событий звонков.

Создание/обновление карточек звонков.

База данных: PostgreSQL 14–17.

Опционально: ClickHouse для аналитики при больших объёмах.

Хранение записей

Записи сохраняются на Asterisk.

В карточке хранится путь и/или URL.

Прослушивание — в UI; скачивание — только для supervisor/admin.

Развёртывание

На этапе разработки: Docker Compose.

WSS/HTTPS: самоподписанный сертификат.

В будущем: перенос в Kubernetes.

3. Модель данных
Основные сущности

users: пользователи (операторы, супервизоры, администраторы).

calls: карточки звонков.

call_purpose: справочник целей звонка.

call_category: справочник категорий.

call_sub_category: подкатегории.

call_tag: опциональные теги.

Поля карточки звонка (calls)

id, uniqueid, linkedid (из Asterisk)

queue (очередь)

direction (inbound/outbound)

status (ringing/answered/missed/abandoned/busy/failed)

started_at, answered_at, ended_at, duration_sec, talk_sec, hold_sec

src_number, dst_number, did

operator_id (FK users)

purpose_id, category_id, sub_category_id

recording_path, recording_url

resolved_first_call (bool)

needs_callback (bool)

notes (резюме разговора, обязательное поле)

Справочники (черновик)

Цели звонка:

Запись на приём

Перенос/отмена визита

Консультация по услугам

Жалоба/претензия

Уточнение расписания

Вопрос по результатам анализов

Финансовые вопросы

Вопрос по страхованию

Техническая помощь

Прочее

Категории звонка:

Медицинские услуги

Лаборатория/анализы

Расписание/приём

Финансы/страхование

Жалобы и предложения

Технические вопросы

Прочее

4. Роли и права

Оператор: доступ к своим звонкам, заполнение карточки, прослушивание записи.

Супервизор: доступ к звонкам своей очереди/отдела, прослушивание записей, скачивание.

Администратор: полный доступ, управление справочниками, всеми пользователями, экспорт данных.

5. API (черновая спецификация)
Calls

GET /calls — список звонков с фильтрацией (дата, оператор, статус, цель, категория).

POST /calls — создать карточку (автоматически при событии).

PUT /calls/:id — обновить карточку (добавить цель, категорию, заметки).

GET /calls/:id — получить карточку.

GET /calls/:id/recording — прослушивание записи.

GET /calls/:id/recording?download=true — скачивание записи (только supervisor/admin).

Dictionaries

GET /dictionaries/purposes

GET /dictionaries/categories

GET /dictionaries/subcategories

GET /dictionaries/tags

Export

GET /export/calls.csv — массовый экспорт карточек за период.

6. Отчёты
Приоритетные отчёты (MVP)

Эффективность операторов

Количество принятых/пропущенных звонков.

Средняя и суммарная длительность разговоров.

Распределение по целям.

Статистика по очередям

Всего звонков.

Принятые/пропущенные.

Answer Rate (%).

Распределение по категориям

Количество звонков по категориям.

Доля нерешённых (нужен перезвон).

Динамика по неделям.

7. Эксплуатация

Хранение данных:

PostgreSQL: карточки звонков, пользователи, справочники.

Asterisk: записи разговоров.

Бэкапы: nightly Postgres + копия записей на NAS.

Развёртывание: Docker Compose (dev/prod v1).

SSL: самоподписанный сертификат для WSS/HTTPS.

8. Следующие шаги (для реализации)

Поднять Docker Compose с Asterisk + Postgres + Backend + Frontend.

Настроить Asterisk (pjsip.conf, http.conf, rtp.conf, ari.conf) для WebRTC и записи.

Реализовать Call Control сервис (Go/Node) с ARI.

Реализовать базовый UI (React + SIP.js) — приём/совершение звонка.

Подключить БД и справочники.

Добавить отчёты и экспорт.

Ввести роли и разграничение прав.
